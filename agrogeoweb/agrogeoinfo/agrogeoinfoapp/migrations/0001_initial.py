# Generated by Django 5.2 on 2025-06-13 21:43

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Actions",
            fields=[
                ("actionid", models.AutoField(primary_key=True, serialize=False)),
                ("begindatetime", models.DateTimeField()),
                ("begindatetimeutcoffset", models.IntegerField()),
                ("enddatetime", models.DateTimeField(blank=True, null=True)),
                ("enddatetimeutcoffset", models.IntegerField(blank=True, null=True)),
                (
                    "actiondescription",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "actionfilelink",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "Actions",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Affiliations",
            fields=[
                ("affiliationid", models.AutoField(primary_key=True, serialize=False)),
                (
                    "isprimaryorganizationcontact",
                    models.BooleanField(blank=True, null=True),
                ),
                ("affiliationstartdate", models.DateField()),
                ("affiliationenddate", models.DateField(blank=True, null=True)),
                (
                    "primaryphone",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("primaryemail", models.CharField(max_length=255)),
                (
                    "primaryaddress",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("personlink", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "Affiliations",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_ActionType",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_ActionType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_AggregationStatistic",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_AggregationStatistic",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_CensorCode",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_CensorCode",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_DataQualityType",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_DataQualityType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_ElevationDatum",
            fields=[
                (
                    "term",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_ElevationDatum",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_Medium",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_Medium",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_MethodType",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_MethodType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_OrganizationType",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_OrganizationType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_QualityCode",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_QualityCode",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_RelationshipType",
            fields=[
                (
                    "term",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_RelationshipType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_ResultType",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_ResultType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_SamplingFeatureGeoType",
            fields=[
                (
                    "term",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_SamplingFeatureGeoType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_SamplingFeatureType",
            fields=[
                (
                    "term",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_SamplingFeatureType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_SiteType",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_SiteType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_Speciation",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_Speciation",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_Status",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_Status",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_TaxonomicClassifierType",
            fields=[
                ("term", models.CharField(max_length=255)),
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_TaxonomicClassifierType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_UnitsType",
            fields=[
                (
                    "term",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_UnitsType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_VariableName",
            fields=[
                (
                    "term",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_VariableName",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="CV_VariableType",
            fields=[
                (
                    "term",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sourcevocabularyuri",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "CV_VariableType",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="People",
            fields=[
                ("personid", models.AutoField(primary_key=True, serialize=False)),
                ("personfirstname", models.CharField(max_length=255)),
                (
                    "personmiddlename",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("personlastname", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "People",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="ProcessingLevels",
            fields=[
                (
                    "processinglevelid",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("processinglevelcode", models.CharField(max_length=50, unique=True)),
                (
                    "definition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "explanation",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
            ],
            options={
                "db_table": "ProcessingLevels",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="SamplingFeatures",
            fields=[
                (
                    "samplingfeatureid",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("samplingfeatureuuid", models.UUIDField()),
                ("samplingfeaturecode", models.CharField(max_length=255, unique=True)),
                (
                    "samplingfeaturename",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "samplingfeaturedescription",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "featuregeometry",
                    django.contrib.gis.db.models.fields.GeometryField(
                        blank=True, null=True, srid=3857
                    ),
                ),
                (
                    "featuregeometrywkt",
                    models.CharField(blank=True, max_length=10000000, null=True),
                ),
                ("elevation_m", models.FloatField(blank=True, null=True)),
                (
                    "elevationdatumcv",
                    models.ForeignKey(
                        blank=True,
                        db_column="elevationdatumcv",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_elevationdatum",
                    ),
                ),
                (
                    "samplingfeaturegeotypecv",
                    models.ForeignKey(
                        blank=True,
                        db_column="samplingfeaturegeotypecv",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_samplingfeaturegeotype",
                    ),
                ),
                (
                    "samplingfeaturetypecv",
                    models.ForeignKey(
                        db_column="samplingfeaturetypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_samplingfeaturetype",
                    ),
                ),
            ],
            options={
                "db_table": "SamplingFeatures",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="SpatialReferences",
            fields=[
                (
                    "spatialreferenceid",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("srscode", models.CharField(blank=True, max_length=50, null=True)),
                ("srsname", models.CharField(max_length=255)),
                (
                    "srsdescription",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("srslink", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "SpatialReferences",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="ActionBy",
            fields=[
                ("bridgeid", models.AutoField(primary_key=True, serialize=False)),
                ("isactionlead", models.BooleanField()),
                (
                    "roledescription",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "actionid",
                    models.ForeignKey(
                        db_column="actionid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.actions",
                    ),
                ),
                (
                    "affiliationid",
                    models.ForeignKey(
                        db_column="affiliationid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.affiliations",
                    ),
                ),
            ],
            options={
                "db_table": "ActionBy",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="actions",
            name="actiontypecv",
            field=models.ForeignKey(
                db_column="actiontypecv",
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="agrogeoinfoapp.cv_actiontype",
            ),
        ),
        migrations.CreateModel(
            name="FeatureActions",
            fields=[
                (
                    "featureactionid",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "actionid",
                    models.ForeignKey(
                        db_column="actionid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.actions",
                    ),
                ),
                (
                    "samplingfeatureid",
                    models.ForeignKey(
                        db_column="samplingfeatureid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.samplingfeatures",
                    ),
                ),
            ],
            options={
                "db_table": "FeatureActions",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Methods",
            fields=[
                ("methodid", models.AutoField(primary_key=True, serialize=False)),
                ("methodcode", models.CharField(max_length=50, unique=True)),
                ("methodname", models.CharField(max_length=255)),
                (
                    "methoddescription",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("methodlink", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "methodtypecv",
                    models.ForeignKey(
                        db_column="methodtypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_methodtype",
                    ),
                ),
            ],
            options={
                "db_table": "Methods",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="actions",
            name="methodid",
            field=models.ForeignKey(
                db_column="methodid",
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="agrogeoinfoapp.methods",
            ),
        ),
        migrations.CreateModel(
            name="Organizations",
            fields=[
                ("organizationid", models.AutoField(primary_key=True, serialize=False)),
                ("organizationcode", models.CharField(max_length=50, unique=True)),
                ("organizationname", models.CharField(max_length=255)),
                (
                    "organizationdescription",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "organizationlink",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "organizationtypecv",
                    models.ForeignKey(
                        db_column="organizationtypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_organizationtype",
                    ),
                ),
                (
                    "parentorganizationid",
                    models.ForeignKey(
                        blank=True,
                        db_column="parentorganizationid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.organizations",
                    ),
                ),
            ],
            options={
                "db_table": "Organizations",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="methods",
            name="organizationid",
            field=models.ForeignKey(
                blank=True,
                db_column="organizationid",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="agrogeoinfoapp.organizations",
            ),
        ),
        migrations.AddField(
            model_name="affiliations",
            name="organizationid",
            field=models.ForeignKey(
                blank=True,
                db_column="organizationid",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="agrogeoinfoapp.organizations",
            ),
        ),
        migrations.AddField(
            model_name="affiliations",
            name="personid",
            field=models.ForeignKey(
                db_column="personid",
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="agrogeoinfoapp.people",
            ),
        ),
        migrations.CreateModel(
            name="RelatedFeatures",
            fields=[
                ("relationid", models.AutoField(primary_key=True, serialize=False)),
                (
                    "relationshiptypecv",
                    models.ForeignKey(
                        db_column="relationshiptypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_relationshiptype",
                    ),
                ),
                (
                    "relatedfeatureid",
                    models.ForeignKey(
                        db_column="relatedfeatureid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="relatedsamplingfeatures",
                        to="agrogeoinfoapp.samplingfeatures",
                    ),
                ),
                (
                    "samplingfeatureid",
                    models.ForeignKey(
                        db_column="samplingfeatureid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.samplingfeatures",
                    ),
                ),
            ],
            options={
                "db_table": "RelatedFeatures",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="TaxonomicClassifiers",
            fields=[
                (
                    "taxonomicclassifierid",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("taxonomicclassifiername", models.CharField(max_length=255)),
                (
                    "taxonomicclassifiercommonname",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "taxonomicclassifierdescription",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "parenttaxonomicclassifierid",
                    models.ForeignKey(
                        blank=True,
                        db_column="parenttaxonomicclassifierid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.taxonomicclassifiers",
                    ),
                ),
                (
                    "taxonomicclassifiertypecv",
                    models.ForeignKey(
                        db_column="taxonomicclassifiertypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_taxonomicclassifiertype",
                    ),
                ),
            ],
            options={
                "db_table": "TaxonomicClassifiers",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Units",
            fields=[
                ("unitsid", models.AutoField(primary_key=True, serialize=False)),
                ("unitsabbreviation", models.CharField(max_length=50)),
                ("unitsname", models.CharField(max_length=255)),
                ("unitslink", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "unitstypecv",
                    models.ForeignKey(
                        db_column="unitstypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_unitstype",
                    ),
                ),
            ],
            options={
                "db_table": "Units",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Variables",
            fields=[
                ("variableid", models.AutoField(primary_key=True, serialize=False)),
                ("variablecode", models.CharField(max_length=50, unique=True)),
                (
                    "variabledefinition",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("nodatavalue", models.FloatField()),
                (
                    "speciationcv",
                    models.ForeignKey(
                        blank=True,
                        db_column="speciationcv",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_speciation",
                    ),
                ),
                (
                    "variablenamecv",
                    models.ForeignKey(
                        db_column="variablenamecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_variablename",
                    ),
                ),
                (
                    "variabletypecv",
                    models.ForeignKey(
                        db_column="variabletypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_variabletype",
                    ),
                ),
            ],
            options={
                "db_table": "Variables",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Results",
            fields=[
                ("resultid", models.BigAutoField(primary_key=True, serialize=False)),
                ("resultuuid", models.UUIDField()),
                ("resultdatetime", models.DateTimeField(blank=True, null=True)),
                (
                    "resultdatetimeutcoffset",
                    models.BigIntegerField(blank=True, null=True),
                ),
                ("validdatetime", models.DateTimeField(blank=True, null=True)),
                (
                    "validdatetimeutcoffset",
                    models.BigIntegerField(blank=True, null=True),
                ),
                ("valuecount", models.IntegerField()),
                (
                    "featureactionid",
                    models.ForeignKey(
                        db_column="featureactionid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.featureactions",
                    ),
                ),
                (
                    "resulttypecv",
                    models.ForeignKey(
                        db_column="resulttypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_resulttype",
                    ),
                ),
                (
                    "sampledmediumcv",
                    models.ForeignKey(
                        db_column="sampledmediumcv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_medium",
                    ),
                ),
                (
                    "statuscv",
                    models.ForeignKey(
                        blank=True,
                        db_column="statuscv",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_status",
                    ),
                ),
                (
                    "processinglevelid",
                    models.ForeignKey(
                        db_column="processinglevelid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.processinglevels",
                    ),
                ),
                (
                    "taxonomicclassifierid",
                    models.ForeignKey(
                        blank=True,
                        db_column="taxonomicclassifierid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.taxonomicclassifiers",
                    ),
                ),
                (
                    "unitsid",
                    models.ForeignKey(
                        db_column="unitsid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "variableid",
                    models.ForeignKey(
                        db_column="variableid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.variables",
                    ),
                ),
            ],
            options={
                "db_table": "Results",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="MeasurementResults",
            fields=[
                (
                    "resultid",
                    models.OneToOneField(
                        db_column="resultid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="agrogeoinfoapp.results",
                    ),
                ),
                ("xlocation", models.FloatField(blank=True, null=True)),
                ("ylocation", models.FloatField(blank=True, null=True)),
                ("zlocation", models.FloatField(blank=True, null=True)),
                ("timeaggregationinterval", models.FloatField()),
                (
                    "aggregationstatisticcv",
                    models.ForeignKey(
                        db_column="aggregationstatisticcv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_aggregationstatistic",
                    ),
                ),
                (
                    "censorcodecv",
                    models.ForeignKey(
                        db_column="censorcodecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_censorcode",
                    ),
                ),
                (
                    "qualitycodecv",
                    models.ForeignKey(
                        db_column="qualitycodecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_qualitycode",
                    ),
                ),
                (
                    "spatialreferenceid",
                    models.ForeignKey(
                        blank=True,
                        db_column="spatialreferenceid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.spatialreferences",
                    ),
                ),
                (
                    "timeaggregationintervalunitsid",
                    models.ForeignKey(
                        db_column="timeaggregationintervalunitsid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="timeaggregationintervalunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "xlocationunitsid",
                    models.ForeignKey(
                        blank=True,
                        db_column="xlocationunitsid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="xlocationunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "ylocationunitsid",
                    models.ForeignKey(
                        blank=True,
                        db_column="ylocationunitsid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="ylocationunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "zlocationunitsid",
                    models.ForeignKey(
                        blank=True,
                        db_column="zlocationunitsid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="zlocationunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
            ],
            options={
                "db_table": "MeasurementResults",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="TimeSeriesResults",
            fields=[
                (
                    "resultid",
                    models.OneToOneField(
                        db_column="resultid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="agrogeoinfoapp.results",
                    ),
                ),
                ("xlocation", models.FloatField(blank=True, null=True)),
                ("ylocation", models.FloatField(blank=True, null=True)),
                ("zlocation", models.FloatField(blank=True, null=True)),
                ("intendedtimespacing", models.FloatField(blank=True, null=True)),
                (
                    "aggregationstatisticcv",
                    models.ForeignKey(
                        db_column="aggregationstatisticcv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_aggregationstatistic",
                    ),
                ),
                (
                    "intendedtimespacingunitsid",
                    models.ForeignKey(
                        blank=True,
                        db_column="intendedtimespacingunitsid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="tsr_intendedtimespacingunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "spatialreferenceid",
                    models.ForeignKey(
                        blank=True,
                        db_column="spatialreferenceid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.spatialreferences",
                    ),
                ),
                (
                    "xlocationunitsid",
                    models.ForeignKey(
                        blank=True,
                        db_column="xlocationunitsid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="tsr_xlocationunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "ylocationunitsid",
                    models.ForeignKey(
                        blank=True,
                        db_column="ylocationunitsid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="tsr_ylocationunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "zlocationunitsid",
                    models.ForeignKey(
                        blank=True,
                        db_column="zlocationunitsid",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="tsr_zlocationunits",
                        to="agrogeoinfoapp.units",
                    ),
                ),
            ],
            options={
                "db_table": "TimeSeriesResults",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Sites",
            fields=[
                (
                    "samplingfeatureid",
                    models.OneToOneField(
                        db_column="samplingfeatureid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="agrogeoinfoapp.samplingfeatures",
                    ),
                ),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                (
                    "sitetypecv",
                    models.ForeignKey(
                        db_column="sitetypecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_sitetype",
                    ),
                ),
                (
                    "spatialreferenceid",
                    models.ForeignKey(
                        db_column="spatialreferenceid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.spatialreferences",
                    ),
                ),
            ],
            options={
                "db_table": "Sites",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="MeasurementResultValues",
            fields=[
                ("valueid", models.BigAutoField(primary_key=True, serialize=False)),
                ("datavalue", models.FloatField()),
                ("valuedatetime", models.DateTimeField()),
                ("valuedatetimeutcoffset", models.IntegerField()),
                (
                    "resultid",
                    models.ForeignKey(
                        db_column="resultid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.measurementresults",
                    ),
                ),
            ],
            options={
                "db_table": "MeasurementResultValues",
                "managed": True,
                "unique_together": {
                    ("resultid", "datavalue", "valuedatetime", "valuedatetimeutcoffset")
                },
            },
        ),
        migrations.CreateModel(
            name="TimeSeriesResultValues",
            fields=[
                ("valueid", models.BigAutoField(primary_key=True, serialize=False)),
                ("datavalue", models.FloatField()),
                ("valuedatetime", models.DateTimeField()),
                ("valuedatetimeutcoffset", models.IntegerField()),
                ("timeaggregationinterval", models.FloatField()),
                (
                    "censorcodecv",
                    models.ForeignKey(
                        db_column="censorcodecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_censorcode",
                    ),
                ),
                (
                    "qualitycodecv",
                    models.ForeignKey(
                        db_column="qualitycodecv",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.cv_qualitycode",
                    ),
                ),
                (
                    "timeaggregationintervalunitsid",
                    models.ForeignKey(
                        db_column="timeaggregationintervalunitsid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.units",
                    ),
                ),
                (
                    "resultid",
                    models.ForeignKey(
                        db_column="resultid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="agrogeoinfoapp.timeseriesresults",
                    ),
                ),
            ],
            options={
                "db_table": "TimeSeriesResultValues",
                "managed": True,
                "unique_together": {
                    (
                        "resultid",
                        "datavalue",
                        "valuedatetime",
                        "valuedatetimeutcoffset",
                        "censorcodecv",
                        "qualitycodecv",
                        "timeaggregationinterval",
                        "timeaggregationintervalunitsid",
                    )
                },
            },
        ),
    ]
