# Generated by Django 5.2 on 2025-06-12 15:22

import uuid
from datetime import date

from django.db import migrations
from django.contrib.gis.geos import GEOSGeometry

import geopandas as gpd


def load_farm_polygon_data(apps, schema_editor):
    ferme = gpd.read_file('./agrogeoinfoapp/static/data/ferme/spatial/CookAgronomyFarm.shp')
    ferme = ferme.to_crs(3857)
    ferme['wkt'] = ferme.geometry.to_wkt()

    #Les tables requises pour l'insertion des donn√©es spatiales
    SamplingFeatures = apps.get_model('agrogeoinfoapp', 'SamplingFeatures')
    CV_SamplingFeatureType = apps.get_model('agrogeoinfoapp', 'CV_SamplingFeatureType')
    CV_SamplingFeatureGeoType = apps.get_model('agrogeoinfoapp', 'CV_SamplingFeatureGeoType')
    CV_ElevationDatum = apps.get_model('agrogeoinfoapp', 'CV_ElevationDatum')

    Organizations = apps.get_model('agrogeoinfoapp', 'Organizations')
    Affiliations = apps.get_model('agrogeoinfoapp', 'Affiliations')

    Methods = apps.get_model('agrogeoinfoapp', 'Methods')
    CV_MethodType = apps.get_model('agrogeoinfoapp', 'CV_MethodType')

    Actions = apps.get_model('agrogeoinfoapp', 'Actions')
    CV_ActionType = apps.get_model('agrogeoinfoapp', 'CV_ActionType')

    ActionBy = apps.get_model('agrogeoinfoapp', 'ActionBy')
    FeatureActions = apps.get_model('agrogeoinfoapp', 'FeatureActions')


    sampling_feature_type_cv = CV_SamplingFeatureType.objects.filter(term="fieldArea").first()

    geotype = ferme.geometry.type[0]  # to convert the Geometry type to match the CV in the ODM
    samplingfeaturegeotypecv = CV_SamplingFeatureGeoType.objects.filter(term=geotype[0].lower() + geotype[1:]).first()

    elevation_datum_cv = CV_ElevationDatum.objects.filter(term="MSL").first()

    farm_feature = SamplingFeatures(
            samplingfeatureuuid=str(uuid.uuid4()),
            samplingfeaturename='Cook Agronomy Farm',
            samplingfeaturetypecv=sampling_feature_type_cv,
            samplingfeaturecode='CookAgronomyFarm',
            samplingfeaturedescription='The Cook Agronomy Farm Boundary',
            featuregeometry=GEOSGeometry(str(ferme.geometry.values[0])),
            featuregeometrywkt=str(ferme.wkt.values[0]),
            samplingfeaturegeotypecv=samplingfeaturegeotypecv,
            elevation_m=-9999,
            elevationdatumcv=elevation_datum_cv,
            )
    farm_feature.save()

    action_type_cv = CV_ActionType.objects.filter(term="genericNonObservation").first()
    method_type_cv = CV_MethodType.objects.filter(term="genericNonObservation").first()
    organization = Organizations.objects.filter(organizationcode='WSU').first()
    affiliation = Affiliations.objects.filter(primaryemail='dave.brown@wsu.edu').first()

    method = Methods(
            methodtypecv=method_type_cv,
            methodcode=str(uuid.uuid4()),
            methodname='Not applicable',
            methoddescription=None,
            methodlink=None,
            organizationid=organization
    )
    method.save()

    action = Actions(
            begindatetime=date(2007, 1, 1),
            begindatetimeutcoffset=-4,
            actiontypecv=action_type_cv,
            actiondescription='',
            methodid=method
    )
    action.save()

    featureaction = FeatureActions(
            actionid=action,
            samplingfeatureid=farm_feature
    )
    featureaction.save()

    action_by = ActionBy(
            isactionlead=False,
            #roledescription='', #no role for this specific sampling feature
            actionid=action,
            affiliationid=affiliation
    )
    action_by.save()


class Migration(migrations.Migration):

    dependencies = [
        ("agrogeoinfoapp", "0003_auto_20250611_1408"),
    ]

    operations = [
        migrations.RunPython(load_farm_polygon_data)
    ]

