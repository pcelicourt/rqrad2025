# Generated by Django 5.2 on 2025-06-12 22:44

from django.db import migrations
import uuid
import pandas as pd
from datetime import datetime,date
from glob import glob


sensors_data_files = glob('./agrogeoinfoapp/static/data/ferme/sensors/Daily/CAF*.txt')

def load_sensor_data(apps, schema_editor):
    Variables = apps.get_model('agrogeoinfoapp', 'Variables')
    CV_VariableType = apps.get_model('agrogeoinfoapp', 'CV_VariableType')
    CV_VariableName = apps.get_model('agrogeoinfoapp', 'CV_VariableName')
    CV_Speciation = apps.get_model('agrogeoinfoapp', 'CV_Speciation')

    CV_UnitsType = apps.get_model('agrogeoinfoapp', 'CV_UnitsType')
    Units = apps.get_model('agrogeoinfoapp', 'Units')

    ProcessingLevels = apps.get_model('agrogeoinfoapp', 'ProcessingLevels')
    TaxonomicClassifiers = apps.get_model('agrogeoinfoapp', 'TaxonomicClassifiers')
    CV_TaxonomicClassifierType = apps.get_model('agrogeoinfoapp', 'CV_TaxonomicClassifierType')

    FeatureActions = apps.get_model('agrogeoinfoapp', 'FeatureActions')
    CV_ResultType = apps.get_model('agrogeoinfoapp', 'CV_ResultType')
    CV_Status = apps.get_model('agrogeoinfoapp', 'CV_Status')

    Results = apps.get_model('agrogeoinfoapp', 'Results')
    CV_Medium = apps.get_model('agrogeoinfoapp', 'CV_Medium')
    SamplingFeatures = apps.get_model('agrogeoinfoapp', 'SamplingFeatures')

    TimeSeriesResults = apps.get_model('agrogeoinfoapp', 'TimeSeriesResults')
    CV_AggregationStatistic = apps.get_model('agrogeoinfoapp', 'CV_AggregationStatistic')
    SpatialReferences = apps.get_model('agrogeoinfoapp', 'SpatialReferences')

    TimeSeriesResultValues = apps.get_model('agrogeoinfoapp', 'TimeSeriesResultValues')
    CV_CensorCode = apps.get_model('agrogeoinfoapp', 'CV_CensorCode')
    CV_QualityCode = apps.get_model('agrogeoinfoapp', 'CV_QualityCode')

    speciation = CV_Speciation.objects.filter(term='notApplicable').first()

    status = CV_Status.objects.filter(term='unknown').first()
    result_type = CV_ResultType.objects.filter(term='categoryObservation').first()
    taxonomic_classifier_cv = CV_TaxonomicClassifierType.objects.filter(term='Hydrology').first()
    sample_medium = CV_Medium.objects.filter(term='soil').first()
    censor_code = CV_CensorCode.objects.filter(term='unknown').first()
    data_quality_code = CV_QualityCode.objects.filter(term='unknown').first()
    aggregation_statistic = CV_AggregationStatistic.objects.filter(term='unknown').first()


    spatial_reference = SpatialReferences(
        srscode='epsg:3857',
        srsname='WGS 84/Pseudo Mercator',
        srsdescription='Datum Name: World Geodetic System 1984',
        srslink='https://epsg.io/3857'
    )
    spatial_reference.save()

    vwc_variable_name = CV_VariableName.objects.filter(term='volumetricWaterContent').first()
    variable_type = CV_VariableType.objects.filter(term='Soil').first()
    vwc_variable = Variables(
        variabletypecv=variable_type,
        variablecode=str(uuid.uuid4()),
        variablenamecv=vwc_variable_name,
        variabledefinition=vwc_variable_name.definition,
        speciationcv=speciation,
        nodatavalue=-9999
    )
    vwc_variable.save()

    variable_unit_type = CV_UnitsType.objects.filter(term='concentrationVolumePerVolume').first()
    vwc_units = Units(
        unitstypecv=variable_unit_type,
        unitsabbreviation='m^3/m^3',
        unitsname='Cubic Meter per Cubic Meter',
        unitslink='http://his.cuahsi.org/mastercvreg/edit_cv11.aspx?tbl=Units&id=1125579048'
    )
    vwc_units.save()

    temperature_variable_name = CV_VariableName.objects.filter(term='temperature').first()
    temperature_variable = Variables(
        variabletypecv=variable_type,
        variablecode=str(uuid.uuid4()),
        variablenamecv=temperature_variable_name,
        variabledefinition=temperature_variable_name.definition,
        speciationcv=speciation,
        nodatavalue=-9999
    )
    temperature_variable.save()

    temperature_variable_unit_type = CV_UnitsType.objects.filter(term='concentrationVolumePerVolume').first()
    temperature_units = Units(
        unitstypecv=temperature_variable_unit_type,
        unitsabbreviation='degC',
        unitsname='Degree Celsius',
        unitslink='http://qudt.org/vocab/unit#DegreeCelsius; http://unitsofmeasure.org/ucum.html#para-30; \
        https://www.unidata.ucar.edu/software/udunits/udunits-current/udunits/udunits2-common.xml; \
        http://his.cuahsi.org/mastercvreg/edit_cv11.aspx?tbl=Units&id=1125579048'
    )
    temperature_units.save()

    location_units_type = CV_UnitsType.objects.filter(term='length').first()
    location_units = Units(
        unitstypecv=location_units_type,
        unitsabbreviation='m',
        unitsname='Meter',
        unitslink='http://qudt.org/vocab/unit#Meter; mhttp://unitsofmeasure.org/ucum.html#para-28; ' +
                  'http://www.unidata.ucar.edu/software/udunits/; http://qwwebservices.usgs.gov/service-domains.html'
    )
    location_units.save()

    time_units_type = CV_UnitsType.objects.filter(term='time').first()
    time_units = Units(
        unitstypecv=time_units_type,
        unitsabbreviation='D',
        unitsname='Day',
        unitslink='http://qudt.org/vocab/unit#Day; http://qwwebservices.usgs.gov/service-domains.html'
    )
    time_units.save()

    taxonomic_classifier = TaxonomicClassifiers(
        taxonomicclassifiertypecv=taxonomic_classifier_cv,
    )

    processing_level = ProcessingLevels(
        processinglevelcode='0',
        definition='Raw data',
        explanation='Unprocessed data and data products that have not undergone quality control.'
    )
    processing_level.save()

    for file_path in sensors_data_files:

        sensor_data = pd.read_csv(file_path, sep='\t', na_values='NA').dropna()
        sensor_location = sensor_data.Location.values[0]
        sampling_feature = SamplingFeatures.objects.filter(samplingfeaturecode=f"{sensor_location}").first()
        featureaction = FeatureActions.objects.filter(samplingfeatureid=sampling_feature).first()

        xlocation = sampling_feature.featuregeometry.coords[0]
        ylocation = sampling_feature.featuregeometry.coords[1]

        for data in sensor_data.itertuples():
            result_time = [int(date_component) for date_component in data.Date.split('/')]

            soil_moisture_results = Results(
                resultuuid=str(uuid.uuid4()),
                resultdatetime=date(result_time[2], result_time[0], result_time[1]),
                featureactionid=featureaction,
                resulttypecv=result_type,
                variableid=vwc_variable,
                unitsid=vwc_units,
                sampledmediumcv=sample_medium,
                statuscv=status,
                valuecount=1, #to be updated
                processinglevelid=processing_level,
                # taxonomicclassifierid=taxonomic_classifier.taxonomicclassifierid
            )
            soil_moisture_results.save()

            soil_moisture_timeseries_results = TimeSeriesResults(
                resultid=soil_moisture_results,
                #zlocation=get_elevation(lat=float(ylocation),lon=float(xlocation)),
                xlocation=xlocation,
                ylocation=ylocation,
                ylocationunitsid=location_units,
                xlocationunitsid=location_units,
                #zlocationunitsid=location_units,
                spatialreferenceid=spatial_reference,
                aggregationstatisticcv=aggregation_statistic,
                intendedtimespacing=1,
                intendedtimespacingunitsid=time_units
            )
            soil_moisture_timeseries_results.save()

            soil_moisture_timeseries_results_values = TimeSeriesResultValues(
                resultid=soil_moisture_timeseries_results,
                datavalue=float(data.VW_30cm),
                valuedatetime=date(result_time[2], result_time[0], result_time[1]),
                valuedatetimeutcoffset=-4,
                timeaggregationinterval=1,
                timeaggregationintervalunitsid=time_units,
                censorcodecv=censor_code,
                qualitycodecv=data_quality_code,
            )
            soil_moisture_timeseries_results_values.save()

            temperature_results = Results(
                resultuuid=str(uuid.uuid4()),
                resultdatetime=date(result_time[2], result_time[0], result_time[1]),
                featureactionid=featureaction,
                resulttypecv=result_type,
                variableid=temperature_variable,
                unitsid=temperature_units,
                sampledmediumcv=sample_medium,
                statuscv=status,
                valuecount=1,
                processinglevelid=processing_level,
                # taxonomicclassifierid=taxonomic_classifier.taxonomicclassifierid
            )
            temperature_results.save()

            temperature_timeseries_results = TimeSeriesResults(
                resultid=temperature_results,
                #zlocation=get_elevation(lat=float(xlocation]),lon=float(ylocation)),
                xlocation=xlocation,
                ylocation=ylocation,
                ylocationunitsid=location_units,
                xlocationunitsid=location_units,
                #zlocationunitsid=location_units,
                spatialreferenceid=spatial_reference,
                aggregationstatisticcv=aggregation_statistic,
                intendedtimespacing=1,
                intendedtimespacingunitsid=time_units
            )
            temperature_timeseries_results.save()

            temperature_timeseries_results_values = TimeSeriesResultValues(
                resultid=temperature_timeseries_results,
                datavalue=float(data.T_30cm),
                valuedatetime=date(result_time[2], result_time[0], result_time[1]),
                valuedatetimeutcoffset=-4,
                timeaggregationinterval=1,
                timeaggregationintervalunitsid=time_units,
                censorcodecv=censor_code,
                qualitycodecv=data_quality_code,
            )
            temperature_timeseries_results_values.save()



class Migration(migrations.Migration):

    dependencies = [
        ("agrogeoinfoapp", "0007_auto_20250612_1530"),
    ]

    operations = [
        migrations.RunPython(load_sensor_data)
    ]
