# Generated by Django 5.2 on 2025-06-12 15:22
import uuid
from datetime import date

from django.db import migrations
from django.contrib.gis.geos import GEOSGeometry

import geopandas as gpd


def load_parcels_polygon_data(apps, schema_editor):

    parcels_data = gpd.read_file('./agrogeoinfoapp/static/data/ferme/spatial/CAF_strips.shp')

    #Les tables requises pour l'insertion des donn√©es spatiales
    SamplingFeatures = apps.get_model('agrogeoinfoapp', 'SamplingFeatures')
    CV_SamplingFeatureType = apps.get_model('agrogeoinfoapp', 'CV_SamplingFeatureType')
    CV_SamplingFeatureGeoType = apps.get_model('agrogeoinfoapp', 'CV_SamplingFeatureGeoType')
    RelatedFeatures = apps.get_model('agrogeoinfoapp', 'RelatedFeatures')
    CV_RelationshipType = apps.get_model('agrogeoinfoapp', 'CV_RelationshipType')

    CV_ElevationDatum = apps.get_model('agrogeoinfoapp', 'CV_ElevationDatum')

    Organizations = apps.get_model('agrogeoinfoapp', 'Organizations')
    Affiliations = apps.get_model('agrogeoinfoapp', 'Affiliations')

    Methods = apps.get_model('agrogeoinfoapp', 'Methods')
    CV_MethodType = apps.get_model('agrogeoinfoapp', 'CV_MethodType')

    Actions = apps.get_model('agrogeoinfoapp', 'Actions')
    CV_ActionType = apps.get_model('agrogeoinfoapp', 'CV_ActionType')

    ActionBy = apps.get_model('agrogeoinfoapp', 'ActionBy')
    FeatureActions = apps.get_model('agrogeoinfoapp', 'FeatureActions')


    sampling_feature_type_cv = CV_SamplingFeatureType.objects.filter(term="fieldArea").first()
    elevation_datum_cv = CV_ElevationDatum.objects.filter(term="MSL").first()

    action_type_cv = CV_ActionType.objects.filter(term="genericNonObservation").first()
    method_type_cv = CV_MethodType.objects.filter(term="genericNonObservation").first()
    organization = Organizations.objects.filter(organizationcode='WSU').first()
    affiliation = Affiliations.objects.filter(primaryemail='dave.brown@wsu.edu').first()

    relationship_type_cv = CV_RelationshipType.objects.filter(term='isPartOf').first()

    parcels_data = parcels_data.to_crs(3857)
    parcels_data['wkt'] = parcels_data.geometry.to_wkt()

    for parcel in parcels_data.itertuples():
        parcel_code = parcel.Strip
        field_code = parcel.Field
        geotype = parcel.geometry.type  # to convert the Geometry type to match the CV in the ODM
        samplingfeaturegeotypecv = CV_SamplingFeatureGeoType.objects.filter(
            term=geotype[0].lower() + geotype[1:]
        ).first()
        parcel_feature = SamplingFeatures(
                samplingfeatureuuid=str(uuid.uuid4()),
                samplingfeaturename=f"Parcel {parcel_code} of field {field_code}",
                samplingfeaturetypecv=sampling_feature_type_cv,
                samplingfeaturecode=f"Parcel{parcel_code}_Field{field_code}",
                samplingfeaturedescription='A field of the Cook Agronomy Farm',
                featuregeometry=GEOSGeometry(str(parcel.geometry)),
                featuregeometrywkt=str(parcel.wkt),
                samplingfeaturegeotypecv=samplingfeaturegeotypecv,
                elevation_m=-9999,
                elevationdatumcv=elevation_datum_cv,
                )
        parcel_feature.save()

        related_feature = SamplingFeatures.objects.filter(samplingfeaturecode=f"Field{field_code}").first()

        related_feature = RelatedFeatures(
            samplingfeatureid=parcel_feature,
            relatedfeatureid=related_feature,
            relationshiptypecv=relationship_type_cv
        )
        related_feature.save()

        method = Methods(
                methodtypecv=method_type_cv,
                methodcode=str(uuid.uuid4()),
                methodname='Not applicable',
                methoddescription=None,
                methodlink=None,
                organizationid=organization
        )
        method.save()

        action = Actions(
                begindatetime=date(2007, 1, 1),
                begindatetimeutcoffset=-4,
                actiontypecv=action_type_cv,
                actiondescription='',
                methodid=method
        )
        action.save()

        featureaction = FeatureActions(
                actionid=action,
                samplingfeatureid=parcel_feature
        )
        featureaction.save()

        action_by = ActionBy(
                isactionlead=False,
                #roledescription='', #no role for this specific sampling feature
                actionid=action,
                affiliationid=affiliation
        )
        action_by.save()


class Migration(migrations.Migration):

    dependencies = [
        ("agrogeoinfoapp", "0005_auto_20250612_1522"),
    ]

    operations = [
        migrations.RunPython(load_parcels_polygon_data)
    ]

